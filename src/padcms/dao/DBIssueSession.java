package padcms.dao;

import java.util.Map;

import padcms.dao.issue.ElementDataFactory;
import padcms.dao.issue.ElementDataPositionFactory;
import padcms.dao.issue.ElementFactory;
import padcms.dao.issue.MenuFactory;
import padcms.dao.issue.PageFactory;
import padcms.dao.issue.PageHorisontalFactory;
import padcms.dao.issue.PageImpositionFactory;
import padcms.dao.issue.bean.Element;
import padcms.dao.issue.bean.ElementData;
import padcms.dao.issue.bean.ElementDataPosition;
import padcms.dao.issue.bean.Menu;
import padcms.dao.issue.bean.Page;
import padcms.dao.issue.bean.PageHorisontal;
import padcms.dao.issue.bean.PageImposition;
import android.database.sqlite.SQLiteDatabase;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DBIssueSession extends AbstractDaoSession {

	private final DaoConfig pageFactoryConfig;
	private final DaoConfig elementFactoryConfig;
	private final DaoConfig elementDataFactoryConfig;
	private final DaoConfig pageHorisontalFactoryConfig;
	private final DaoConfig pageImpositionFactoryConfig;
	private final DaoConfig menuFactoryConfig;
	private final DaoConfig elementDataPositionFactoryConfig;

	private final PageFactory pageFactory;
	private final ElementFactory elementFactory;
	private final ElementDataFactory elementDataFactory;
	private final PageHorisontalFactory pageHorisontalFactory;
	private final PageImpositionFactory pageImpositionFactory;
	private final ElementDataPositionFactory elementDataPositionFactory;
	private final MenuFactory menuFactory;

	public DBIssueSession(SQLiteDatabase db, IdentityScopeType type,
			Map<Class<? extends AbstractDao<?, ?>>, DaoConfig> daoConfigMap) {
		super(db);

		pageFactoryConfig = daoConfigMap.get(PageFactory.class).clone();
		pageFactoryConfig.initIdentityScope(type);

		elementFactoryConfig = daoConfigMap.get(ElementFactory.class).clone();
		elementFactoryConfig.initIdentityScope(type);

		elementDataFactoryConfig = daoConfigMap.get(ElementDataFactory.class)
				.clone();
		elementDataFactoryConfig.initIdentityScope(type);

		pageHorisontalFactoryConfig = daoConfigMap.get(
				PageHorisontalFactory.class).clone();
		pageHorisontalFactoryConfig.initIdentityScope(type);

		pageImpositionFactoryConfig = daoConfigMap.get(
				PageImpositionFactory.class).clone();
		pageImpositionFactoryConfig.initIdentityScope(type);

		elementDataPositionFactoryConfig = daoConfigMap.get(
				ElementDataPositionFactory.class).clone();
		elementDataPositionFactoryConfig.initIdentityScope(type);

		menuFactoryConfig = daoConfigMap.get(MenuFactory.class).clone();
		menuFactoryConfig.initIdentityScope(type);

		pageFactory = new PageFactory(pageFactoryConfig, this);
		elementFactory = new ElementFactory(elementFactoryConfig, this);
		elementDataFactory = new ElementDataFactory(elementDataFactoryConfig,
				this);
		pageHorisontalFactory = new PageHorisontalFactory(
				pageHorisontalFactoryConfig, this);
		pageImpositionFactory = new PageImpositionFactory(
				pageImpositionFactoryConfig, this);
		elementDataPositionFactory = new ElementDataPositionFactory(
				elementDataPositionFactoryConfig, this);
		menuFactory = new MenuFactory(menuFactoryConfig, this);

		registerDao(Page.class, pageFactory);
		registerDao(Element.class, elementFactory);
		registerDao(ElementData.class, elementDataFactory);
		registerDao(PageHorisontal.class, pageHorisontalFactory);
		registerDao(PageImposition.class, pageImpositionFactory);
		registerDao(Menu.class, menuFactory);
		registerDao(ElementDataPosition.class, elementDataPositionFactory);

	}

	public void clear() {
		pageFactoryConfig.getIdentityScope().clear();
		elementDataFactoryConfig.getIdentityScope().clear();
		elementFactoryConfig.getIdentityScope().clear();
		pageHorisontalFactoryConfig.getIdentityScope().clear();
		pageImpositionFactoryConfig.getIdentityScope().clear();
		elementDataPositionFactoryConfig.getIdentityScope().clear();
		menuFactoryConfig.getIdentityScope().clear();
	}

	public PageFactory getPageFactory() {
		return pageFactory;
	}

	public ElementFactory getElementFactory() {
		return elementFactory;
	}

	public ElementDataFactory getElementDataFactory() {
		return elementDataFactory;
	}

	public PageHorisontalFactory getPageHorisontalFactory() {
		return pageHorisontalFactory;
	}

	public PageImpositionFactory getPageImpositionFactory() {
		return pageImpositionFactory;
	}

	public ElementDataPositionFactory getElementDataPositionFactory() {
		return elementDataPositionFactory;
	}

	public MenuFactory getMenuFactory() {
		return menuFactory;
	}

}
