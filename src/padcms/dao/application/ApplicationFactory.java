package padcms.dao.application;

import java.util.ArrayList;

import org.json.JSONObject;

import padcms.dao.DBApplicationSession;
import padcms.dao.application.bean.Application;
import padcms.dao.application.bean.Issue;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table NOTE.
 */
public class ApplicationFactory extends AbstractDao<Application, Long> {

	public static final String TABLENAME = "Application";

	public static class Properties {
		public final static Property id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property title = new Property(1, String.class,
				"title", false, "title");
		public final static Property version = new Property(2, String.class,
				"version", false, "version");
		public final static Property description = new Property(3,
				String.class, "description", false, "description");
		public final static Property nm_twitter = new Property(4, String.class,
				"nm_twitter", false, "nm_twitter");
		public final static Property nm_fbook = new Property(5, String.class,
				"nm_fbook", false, "nm_fbook");
		public final static Property nm_email = new Property(6, String.class,
				"nm_email", false, "nm_email");
		public final static Property nt_email = new Property(7, String.class,
				"nt_email", false, "nt_email");
	};

	public ApplicationFactory(DaoConfig config) {
		super(config);
	}

	public ApplicationFactory(DaoConfig config, DBApplicationSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String sql = "CREATE TABLE " + (ifNotExists ? "IF NOT EXISTS " : "")
				+ "'" + TABLENAME + "' (" + "'_id' INTEGER PRIMARY KEY ,"
				+ "'title' TEXT NOT NULL ," + "'version' TEXT NOT NULL ,"
				+ "'description' TEXT NOT NULL ,"
				+ "'nm_twitter' TEXT NOT NULL ," + "'nm_fbook' TEXT NOT NULL ,"
				+ "'nm_email' TEXT NOT NULL ," + "'nt_email' TEXT NOT NULL"
				+ ");";
		db.execSQL(sql);
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'"
				+ TABLENAME + "'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Application entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindString(2, entity.getTitle());
		stmt.bindString(3, entity.getVersion());
		stmt.bindString(4, entity.getDescription());
		stmt.bindString(5, entity.getNm_twitter());
		stmt.bindString(6, entity.getNm_fbook());
		stmt.bindString(7, entity.getNm_twitter());
		stmt.bindString(8, entity.getNt_email());
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Application readEntity(Cursor cursor, int offset) {
		Application entity = new Application(
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getString(offset + 1), cursor.getString(offset + 2),
				cursor.getString(offset + 3), cursor.getString(offset + 4),
				cursor.getString(offset + 5), cursor.getString(offset + 6),
				cursor.getString(offset + 7)

		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Application entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setTitle(cursor.getString(offset + 1));
		entity.setVersion(cursor.getString(offset + 2));
		entity.setDescription(cursor.getString(offset + 3));
		entity.setNm_twitter(cursor.getString(offset + 4));
		entity.setNm_fbook(cursor.getString(offset + 5));
		entity.setNm_email(cursor.getString(offset + 6));
		entity.setNt_email(cursor.getString(offset + 7));

	}

	@Override
	protected Long updateKeyAfterInsert(Application entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Application entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public Application initApplicationByJson(JSONObject applicationjson) {
		Application application = new Application();

		return application;
	}

	public Application loadFirstApplication() {

		Application application = null;
		ArrayList<Application> applicationCollection = (ArrayList<Application>) loadAll();
		if (applicationCollection != null && applicationCollection.size() > 0) {
			application = (Application) applicationCollection.get(0);
			loadApplicationIssue(application);
		}
		return application;
	}

	public void loadApplicationIssue(Application entity) {
		IssueFactory issueFactory = ((DBApplicationSession) getSession())
				.getIssueFactory();
		entity.setIssueList(issueFactory.loadIssueListByApplicationID(entity
				.getId()));
	}

	public Issue getIssue(Application entity, Long id) {
		for (Issue issue : entity.getIssueList()) {
			if (issue.getId().equals(id)) {
				return issue;
			}
		}
		return null;
	}

	public ArrayList<Issue> getIssueList(Application entity) {
		ArrayList<Issue> listIssue = new ArrayList<Issue>();
		if (entity.getIssueList() == null) {
			IssueFactory issueFactory = ((DBApplicationSession) getSession())
					.getIssueFactory();
			listIssue = issueFactory.loadIssueListByApplicationID(entity
					.getId());
			entity.setIssueList(listIssue);

		} else
			listIssue = entity.getIssueList();
		return listIssue;
	}

}
