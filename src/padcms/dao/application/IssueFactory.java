package padcms.dao.application;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

import padcms.dao.DBApplicationSession;
import padcms.dao.application.bean.Issue;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table NOTE.
 */
public class IssueFactory extends AbstractDao<Issue, Long> {

	public static final String TABLENAME = "Issue";

	public static class Properties {
		public final static Property id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property title = new Property(1, String.class,
				"title", false, "title");
		public final static Property state = new Property(2, String.class,
				"state", false, "state");
		public final static Property product_id = new Property(3, Long.class,
				"product_id", false, "product_id");
		public final static Property application_id = new Property(4,
				Long.class, "application_id", false, "application_id");
		public final static Property issue_number = new Property(5, Long.class,
				"issue_number", false, "issue_number");

	};

	public IssueFactory(DaoConfig config) {
		super(config);
	}

	public IssueFactory(DaoConfig config, DBApplicationSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String sql = "CREATE TABLE " + (ifNotExists ? "IF NOT EXISTS " : "")
				+ "'" + TABLENAME + "' (" + "'_id' INTEGER PRIMARY KEY ,"
				+ " 'title' TEXT NOT NULL ," + " 'state' TEXT NOT NULL ,"
				+ " 'product_id' INTEGER NOT NULL, "
				+ " 'application_id' INTEGER NOT NULL, "
				+ " 'issue_number' INTEGER NOT NULL" + ");";
		db.execSQL(sql);
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'"
				+ TABLENAME + "'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Issue entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindString(2, entity.getTitle());
		stmt.bindString(3, entity.getState());
		stmt.bindLong(4, entity.getProduct_id());
		stmt.bindLong(5, entity.getApplication_id());
		stmt.bindLong(6, entity.getIssue_number());
		// stmt.bindString(6, entity.getPaid());
		// stmt.bindString(7, entity.getUpdated());

		// stmt.bindString(12, entity.getRelease_date());

	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Issue readEntity(Cursor cursor, int offset) {
		Issue entity = new Issue(
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getString(offset + 1), cursor.getString(offset + 2),
				cursor.getLong(offset + 3), cursor.getLong(offset + 4),
				cursor.getLong(offset + 5));
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Issue entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setTitle(cursor.getString(offset + 1));
		entity.setState(cursor.getString(offset + 2));
		entity.setProduct_id(cursor.getLong(offset + 3));
		entity.setApplication_id(cursor.getLong(offset + 4));
		entity.setIssue_number(cursor.getLong(offset + 5));
		// entity.setColor(cursor.getString(offset + 5));
		// entity.setHorizontal_mode(cursor.getString(offset + 6));
		// entity.setHelp_page_horizontal(cursor.getString(offset + 7));
		// entity.setHelp_page_vertical(cursor.getString(offset + 8));

	}

	@Override
	protected Long updateKeyAfterInsert(Issue entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Issue entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public ArrayList<Issue> loadIssueListByApplicationID(Long applicationid) {
		ArrayList<Issue> arrayList = new ArrayList<Issue>();
		String[] colums = getAllColumns();
		Cursor cursor = db.query(TABLENAME, colums,
				Properties.application_id.columnName + "=?",
				new String[] { String.valueOf(applicationid) }, null, null,
				null);
		if (cursor != null) {
			if (cursor.getCount() > 0) {
				cursor.moveToFirst();
				for (int i = 0; i < cursor.getCount(); i++) {
					Issue issue = readEntity(cursor, 0);
					arrayList.add(issue);
					loadRevisions(issue);
					cursor.moveToNext();
				}
			}
			cursor.close();
		}
		Collections.sort(arrayList);
		return arrayList;
	}

	public void loadRevisions(Issue entity) {
		RevisionFactory revisionFactory = ((DBApplicationSession) getSession())
				.getRevisionFactory();
		entity.setRevisionList(revisionFactory.loadByIssueId(entity.getId()));
	}

	public void insertList(ArrayList<Issue> list) {
		for (Issue issue : list) {
			insert(issue);
			((DBApplicationSession) getSession()).getRevisionFactory()
					.insertList(issue.getRevisionList());
		}
	}

	public void updateList(ArrayList<Issue> list) {
		for (Issue issue : list) {
			update(issue);
		}
	}

}
