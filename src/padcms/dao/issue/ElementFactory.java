package padcms.dao.issue;

import java.util.ArrayList;
import java.util.List;

import padcms.dao.DBIssueSession;
import padcms.dao.issue.bean.Element;
import padcms.dao.issue.bean.ElementData;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table NOTE.
 */
public class ElementFactory extends AbstractDao<Element, Long> {

	public static final String TABLENAME = "element";

	public static class Properties {

		public final static Property id = new Property(0, Long.class, "id",
				true, "id");
		public final static Property page_id = new Property(1, Long.class,
				"page_id", false, "page_id");
		public final static Property element_type_name = new Property(2,
				String.class, "element_type_name", false, "element_type_name");
		public final static Property weight = new Property(3, Long.class,
				"weight", false, "weight");
		public final static Property content_text = new Property(4,
				byte[].class, "content_text", false, "content_text");

	};

	public ElementFactory(DaoConfig config) {
		super(config);
	}

	public ElementFactory(DaoConfig config, DBIssueSession daoSession) {
		super(config, daoSession);
	}

	// /** Creates the underlying database table. */
	// public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
	// String sql = "CREATE TABLE " + (ifNotExists ? "IF NOT EXISTS " : "")
	// + "'" + TABLENAME + "' (" + "'_id' INTEGER PRIMARY KEY ,"
	// + " 'title' TEXT NOT NULL ," + "'horisontal_page_id' INTEGER NOT NULL ,"
	// + " 'template' INTEGER NOT NULL ,"
	// + " 'application_id' INTEGER NOT NULL ,"
	// + " 'paid' TEXT NOT NULL ," + " 'updated' TEXT NOT NULL ,"
	// + " 'color' TEXT NOT NULL ,"
	// + " 'subscription_type' TEXT NOT NULL" + ");";
	// db.execSQL(sql);
	// }

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'"
				+ TABLENAME + "'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Element entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindLong(2, entity.getPage_id());
		stmt.bindString(3, entity.getElement_type_name());
		stmt.bindLong(4, entity.getWeight());
		stmt.bindBlob(5, entity.getContent_text());

	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Element readEntity(Cursor cursor, int offset) {
		Element entity = new Element(
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getLong(offset + 1), cursor.getString(offset + 2),
				cursor.getLong(offset + 3), cursor.getBlob(offset + 4));
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Element entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setPage_id(cursor.getLong(offset + 1));
		entity.setElement_type_name(cursor.getString(offset + 2));
		entity.setWeight(cursor.getLong(offset + 3));
		entity.setContent_text(cursor.getBlob(offset + 4));

	}

	@Override
	protected Long updateKeyAfterInsert(Element entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Element entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public List<Element> loadAllByPageID(Long pageID) {
		ArrayList<Element> arrayList = new ArrayList<Element>();
		ElementDataFactory elementDataFactory = ((DBIssueSession) getSession())
				.getElementDataFactory();

		Cursor cursor = db.query(TABLENAME, getAllColumns(),
				Properties.page_id.columnName + "=?",
				new String[] { String.valueOf(pageID) }, null, null, null);

		if (cursor != null) {
			if (cursor.getCount() > 0) {
				cursor.moveToFirst();
				for (int i = 0; i < cursor.getCount(); i++) {
					Element element = readEntity(cursor, 0);
					arrayList.add(element);

					List<ElementData> elementDataCollection = elementDataFactory
							.loadAllByElementID(element.getId());
					element.setListElementData(elementDataCollection);

					cursor.moveToNext();
				}
			}
			cursor.close();

		}
		return arrayList;
	}

}
