package padcms.dao.issue;

import padcms.dao.DBIssueSession;
import padcms.dao.issue.bean.ElementDataPosition;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table NOTE.
 */
public class ElementDataPositionFactory extends
		AbstractDao<ElementDataPosition, Long> {

	public static final String TABLENAME = "element_data_position";

	public static class Properties {
		public final static Property id = new Property(0, Long.class, "id",
				true, "id");
		public final static Property start_x = new Property(1, Long.class,
				"start_x", false, "start_x");
		public final static Property start_y = new Property(2, Long.class,
				"start_y", false, "start_y");
		public final static Property end_x = new Property(3, Long.class,
				"end_x", false, "end_x");
		public final static Property end_y = new Property(4, Long.class,
				"end_y", false, "end_y");

	};

	public ElementDataPositionFactory(DaoConfig config) {
		super(config);
	}

	public ElementDataPositionFactory(DaoConfig config,
			DBIssueSession daoSession) {
		super(config, daoSession);
	}

	// /** Creates the underlying database table. */
	// public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
	// String sql = "CREATE TABLE " + (ifNotExists ? "IF NOT EXISTS " : "")
	// + "'" + TABLENAME + "' (" + "'_id' INTEGER PRIMARY KEY ,"
	// + " 'title' TEXT NOT NULL ," + "'horisontal_page_id' INTEGER NOT NULL ,"
	// + " 'template' INTEGER NOT NULL ,"
	// + " 'application_id' INTEGER NOT NULL ,"
	// + " 'paid' TEXT NOT NULL ," + " 'updated' TEXT NOT NULL ,"
	// + " 'color' TEXT NOT NULL ,"
	// + " 'subscription_type' TEXT NOT NULL" + ");";
	// db.execSQL(sql);
	// }

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'"
				+ TABLENAME + "'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, ElementDataPosition entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindLong(2, entity.getStart_x());
		stmt.bindLong(3, entity.getStart_y());
		stmt.bindLong(4, entity.getEnd_x());
		stmt.bindLong(5, entity.getEnd_y());

	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public ElementDataPosition readEntity(Cursor cursor, int offset) {
		ElementDataPosition entity = new ElementDataPosition(
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getLong(offset + 1), cursor.getLong(offset + 2),
				cursor.getLong(offset + 3), cursor.getLong(offset + 4));
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, ElementDataPosition entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setStart_x(cursor.getLong(offset + 1));
		entity.setStart_y(cursor.getLong(offset + 2));
		entity.setEnd_x(cursor.getLong(offset + 3));
		entity.setEnd_y(cursor.getLong(offset + 4));

	}

	@Override
	protected Long updateKeyAfterInsert(ElementDataPosition entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(ElementDataPosition entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}
	

}
