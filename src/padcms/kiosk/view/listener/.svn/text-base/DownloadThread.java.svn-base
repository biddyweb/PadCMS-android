package adyax.listeners;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.w3c.dom.Document;

import adyax.bll.ApplicationController;
import adyax.bll.Constants;
import adyax.test.rue89.R;
import adyax.manager.Manager;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.StatFs;
import android.util.Log;
import arrancar4.posting.SocialSomewhat;

public class DownloadThread extends Thread {
	private Handler mHandler;
	private ThreadWorkingState state = new ThreadWorkingState(false);
	private int revisionIdToDownload;
	private File zipFile = null;
	private Context context;

	public DownloadThread(Handler handler, int revId, Context context) {
		mHandler = handler;
		revisionIdToDownload = revId;
		this.context = context;
	}

	private void deleteFolder(File file) {
		if (file.isDirectory()) {
			File[] list = file.listFiles();
			for (File f : list) {
				deleteFolder(f);
			}
			file.delete();
		} else {
			file.delete();
		}
	}

	private void dirChecker(String name) {
		// Log.e("THE_LOG", name);
		File file = new File(Constants.getMagazineFolderByRevisionId(
				revisionIdToDownload).getAbsolutePath()
				+ "/" + name);
		if (file.isDirectory()) {
			file.mkdirs();
		} else {
			new File(file.getParent()).mkdirs();
		}
	}

	private void sendInt(String key, int value) {
		Message msg = new Message();
		Bundle bundle = new Bundle();
		bundle.putInt(key, value / 1024 / 1024);
		msg.setData(bundle);
		mHandler.sendMessage(msg);
	}

	/*
	 * private void sendMessage(String key, int value) { Message msg = new
	 * Message(); if (key.equals("length")) { msg.arg1 = 0; msg.arg2 = value; }
	 * else if (key.equals("download")) { msg.arg1 = 1; msg.arg2 = value; } else
	 * if (key.equals("downloaded")) { msg.arg1 = 2; msg.arg2 = value; } else if
	 * (key.equals("unzipping")) { msg.arg1 = 3; msg.arg2 = value; } else if
	 * (key.equals("unziped")) { msg.arg1 = 4; msg.arg2 = value; } else if
	 * (key.equals("Error")) { msg.arg1 = 5; msg.arg2 = value; }
	 * mHandler.sendMessage(msg); }
	 */

	private void sendMessageError(String value) {
		Message msg = new Message();
		msg.arg1 = 5;
		msg.obj = value;
		mHandler.sendMessage(msg);
	}

	private void sendBoolean(String key, boolean value) {
		Message msg = new Message();
		Bundle bundle = new Bundle();
		bundle.putBoolean(key, value);
		msg.setData(bundle);
		mHandler.sendMessage(msg);
	}

	// http://padcms.adyax.com/export/revision/id/63/continue/issue51-rev63-upd2600127896

	@Override
	public void run() {
		if (SocialSomewhat.isOnline(context)) {
			try {
				state.setState(true);

				URL urlToWork = new URL(getZipUrl());
				
				int offset;

				zipFile = getZipFile();
				if (zipFile.exists()) {
					offset = (int) zipFile.length();
				} else {
					offset = 0;
				}

				Log.e("", "offset = " + offset);
				HttpURLConnection connection = (HttpURLConnection) urlToWork
						.openConnection();
				// connection.setRequestMethod("GET");

				/*
				 * int responseCode= connection.getResponseCode(); if
				 * (responseCode/ 100 != 2) {
				 * 
				 * Log.e("THE LOG rc", ""+responseCode); return; }else {
				 * //Log.e("THE LOG ", ""+connection.getResponseMessage());
				 * 
				 * }
				 */
				/*
				 * Log.e("THE LOG","zip file length " + getZipFile().length());
				 * Log.e("THE LOG","avalible in connection " +
				 * connection.getContentLength()); connection.disconnect();
				 */
				// 04-20 11:25:34.045: VERBOSE/FieName:(858): attachment;
				// filename=issue20-rev47-upd2594242583.zip
				// 04-20 11:28:51.337: VERBOSE/FieName:(939):
				// content-disposition

				// String filename =
				// connection.getHeaderField("Content-Disposition").split(";")[1];
				// Log.v("FieName: ",""+connection.getHeaderField("content-disposition"));
				// Log.v("FieName: ",""+filename );
				// Log.v("FieName: ",""+connection.getHeaderFieldKey(9));
				// Log.v("Content",""+connection .getContent().toString());

				connection.setDoInput(true);
				connection.setDoOutput(true);
				connection.addRequestProperty("Range", "bytes=" + offset + "-");
				int BUFFER_SIZE = 8196;

				// if length greater then zero, we must download some data
				long length = connection.getContentLength();

				if (length > 0) {
					if (isFreeSpaceEnough(length)) {
						// Log.e("THE LOG", "zip file length " +
						// zipFile.length());
						// Log.e("THE LOG", "avalible in connection "+ length );

						// sendMessage("length", (int) (zipFile.length() +
						// connection.getContentLength()));

						sendInt("length", (int) (/* zipFile.length() */+length));
						FileOutputStream fos = new FileOutputStream(zipFile,
								true);
						// connection.connect();
						InputStream input = connection.getInputStream();
						input.skip(zipFile.length());
						BufferedInputStream bis = new BufferedInputStream(
								input, BUFFER_SIZE);

						int downloaded = (int) zipFile.length();
						// Log.e("THE LOG", "OFFSET = " + downloaded);
						// bis.skip(downloaded);

						byte b[] = new byte[BUFFER_SIZE];
						float onePersent = length / 100.0f;
						float downloadPersenr = onePersent;
						int n;
						// int offsetFirst=(int) zipFile.length();
						while ((n = bis.read(b, 0, BUFFER_SIZE)) >= 0) {
							fos.write(b, 0, n);
							if (!state.getState()) {
								bis.close();
								fos.close();
								return;
							}
							downloaded += n;
							if (downloadPersenr < downloaded) {
								// sendMessage("download", downloaded);
								sendInt("downloaded", downloaded);
								downloadPersenr += onePersent;
							}
						}
						bis.close();
						fos.close();
					} else {
						connection.disconnect();

						sendMessageError(context.getResources().getString(
								R.string.error_no_space));
						return;
					}
				}
				connection.disconnect();
				sendBoolean("unzipping", true);
				if (Constants.getMagasineManifestFile(revisionIdToDownload) == null) {
					deleteFolder(getUnzipFolder());
					getUnzipFolder().mkdir();
					ZipInputStream zis = new ZipInputStream(
							new BufferedInputStream(
									new FileInputStream(zipFile), BUFFER_SIZE));

					ZipEntry ze = null;
					long unzipped = (long) (zipFile.length() * 1.5);

					if (isFreeSpaceEnough(unzipped)) {
						zis.close();
						zis = new ZipInputStream(new BufferedInputStream(
								new FileInputStream(zipFile), BUFFER_SIZE));
						while ((ze = zis.getNextEntry()) != null) {
							dirChecker(ze.getName());
							File outputFile = new File((getUnzipFolder()
									.getPath() + "/" + ze.getName()));

							BufferedOutputStream fos = new BufferedOutputStream(
									new FileOutputStream(outputFile),
									BUFFER_SIZE);
							byte b[] = new byte[BUFFER_SIZE];
							int n;
							while ((n = zis.read(b, 0, BUFFER_SIZE)) >= 0) {
								fos.write(b, 0, n);
								if (!state.getState()) {
									zis.closeEntry();
									fos.close();
									zis.close();
									return;
								}
							}
							zis.closeEntry();
							fos.close();
						}
						zis.close();
						sendBoolean("unziped", true);

					} else {
						zis.close();
						sendMessageError(context.getResources().getString(
								R.string.error_no_space));
						return;

					}
				}
				try {
					Looper.prepare();
					Document manifest = Constants.getManifestDocument(Constants
							.getMagasineManifestFile(revisionIdToDownload));
					if (manifest == null)
						throw new Exception();

					ApplicationController.parseAndConverMagazine(mHandler,
							state, (Activity) context, manifest,
							revisionIdToDownload);
					Looper.myLooper().quit();
				} catch (Exception e) {
					throw new Exception(context.getResources().getString(
							R.string.error_inslallation_failed));
				}
				if (!state.getState()) {
					return;
				}
				sendBoolean("converted", true);
				zipFile.delete();

				// Log.e(TAG, "Download time = " + (downloadTime - startTime)
				// / 1000000);
				// Log.e(TAG, "Unzipping time = " + (unzippedTime -
				// downloadTime)
				// / 1000000);
				// Log.e(TAG, "Converting time = "
				// + (convertedTime - unzippedTime) / 1000000);
				// Log.e(TAG, "Total time = " + (convertedTime - startTime)
				// / 1000000);
			} catch (IOException e) {

				if (getUnzipFolder().exists()) {
					deleteFolder(getUnzipFolder());
				}
				e.printStackTrace();
				Manager.SELECTED_ITEM = 0;
				sendMessageError(e.getMessage());
			} catch (Exception e) {
				e.getStackTrace();
				Manager.SELECTED_ITEM = 0;
				sendMessageError(e.getMessage() == null ? context
						.getResources().getString(R.string.error_no_connection)
						: e.getMessage());
			}
		} else {
			Manager.SELECTED_ITEM = 0;
			sendMessageError(context.getResources().getString(
					R.string.error_no_connection));
		}
	}

	public void setState(boolean value) {
		// Log.e(TAG, "setWorking = " + value);
		state.setState(value);
	}

	private boolean isFreeSpaceEnough(long length) {
		File sdcard = Environment.getExternalStorageDirectory();
		StatFs stat = new StatFs(sdcard.getAbsolutePath());
		long available = stat.getAvailableBlocks() * (long) stat.getBlockSize();
		// Log.e("THE LOG", "aval = " + available);
		return available - length * 1.1 >= 0;
	}

	public String getFileNameByUrl(URL urlToFile) throws MalformedURLException,
			IOException {

		URLConnection conn = urlToFile.openConnection();

		conn.getContent();
		Log.i("$$$$$$$$$$", conn.getURL().getFile());

		String fileName = conn.getURL().getFile();
		fileName = fileName.substring(fileName.lastIndexOf("/") + 1);
		// .,conn.getHeaderField("Content-Disposition").split(";")[1]
		// .replace("filename=", "");
		Log.i("$$$$$$$$$$ file", "file = " + fileName);
		return fileName;
	}

	private File getZipFile() {
		return new File(Constants.getTempFolder().getAbsolutePath() + "/"
				+ revisionIdToDownload + ".zip");
	}

	private File getUnzipFolder() {
		// Log.w("THE LOG",
		// Constants.getMagazineFolderByRevisionId(revisionIdToDownload)
		// .getAbsolutePath());
		return Constants.getMagazineFolderByRevisionId(revisionIdToDownload);
	}

	private String getZipUrl() {
		return Constants.revDownloadUrl + revisionIdToDownload;
	}

	private String getZipUrlContinue(String fullName) {
		// http://padcms.adyax.com/export/revision/id/%d/continue/%@
		return getZipUrl() + "/continue/" + fullName.trim();
	}
}
